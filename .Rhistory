sum(Ozone_n)
sum(Ozone_n)/length(Ozone_n)
mean(Ozone_n)
mean(hw1_data$"Solar.R"[hw1_data$"Ozone" > 31 and hw1_data$"Temp" > 90])
Ozone31 <- hw1_data$"Ozone"[hw1_data$"Ozone" > 31]
Ozone31
Ozone31T <- !(is.na(Ozone31))
Ozone31T
Temp90 <- hw1_data$"Temp"[hw1_data$"Temp" > 90]
temp90
Temp90
rm(Temp90)
OT <- Ozone_31T[hw1_data$"Temp" > 90]
OT <- Ozone31T[hw1_data$"Temp" > 90]
OT
Ozone31T
names(hw1_data)
hw_O31 <- hw1_data[Ozone31T]
hw_O31 <- hw1_data[Ozone31T,]
nrow(hw_O31)
names(hw_O31)
hw_O31
Ona <- is.na(hw1_O31$"Ozone")
Ona <- is.na(hw_O31$"Ozone")
hw_O31na <- hw_O31[!Ona,]
hw_O31na
nrow(hw_O31)
oz_na <- is.na(hw1_data$"Ozone")
oz_na
hw_oz_na <- hw1_data[!oz_na,]
nrow(hw_oz_na)
hw_oz_31 <- hw_oz_na[hw_oz_na$"Ozone" > 31,]
hw_oz_31
hw_oz_31_tmp_90 <- hw_oz_31[hw_oz_31$"Temp" > 90, ]
hw_oz_31_tmp_90
mean(hw_oz_31_tmp_90$"Solar.R")
hw_m6 <- hw1_data[hw1_data$"Month" == 6, ]
hw_m6
mean(hw_m6$"Temp")
max(hw_m6$"Temp")
hw_m5 <- hw1_data[hw1_data$"Month" == 5, ]
max(hw_m5$"Ozone")
hw_m5
hw_m5_na <- hw_m5[!(is.na(hw_m5$"Ozone")),]
hw_m5_na
max(hw_m5_na)
max(hw_m5_na$"Ozone")
setwd("~/Desktop/GettingnCleaningData/week3/quizes")
if(!file.exists("./data")){dir.create("./data")}
Q1url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(Q1url, dest_file="./data/Q1.csv", method="curl")
dateDownloaded_Q1 <- date()
Q1_data <- read.csv("./data/Q1.csv")
head(Q1_data, n=3)
Q1url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(Q1url, destfile="./data/Q1.csv", method="curl")
dateDownloaded_Q1 <- date()
Q1_data <- read.csv("./data/Q1.csv")
head(Q1_data, n=3)
?which()
Q1_data[59,]
Q1_data[59,11:12]
Q1_data[125,11:12]
Q1_data[236,11:12]
Q1_data[403,11:12]
Q1_data[1,ACR]
Q1_data[1,"ACR"]
col <- c("ACR", "AGS")
Q1_data_comp <- Q1_data[complete.cases(Q1_data[, col]),]
agricultureLogical <- Q1_data_comp[,"ACR"] == 3 & Q1_data_comp[,"AGS"] == 6
which(agricultureLogical, arr.ind = TRUE)
which(agricultureLogical)
head(Q1_data_comp[,11:12])
Q1_data_comp[27,11:12]
?which()
which(agricultureLogical, arr.ind = FALSE)
which(agricultureLogical)[1:3]
agricultureLogical <- Q1_data[,"ACR"] == 3 & Q1_data[,"AGS"] == 6
which(agricultureLogical)[1:3]
install.packages("jpeg")
library(jpeg)
?jpeg()
?quantile()
Q2url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(Q2url, destfile="./data/Q2.jpg", method="curl")
Q2_jpg <- jpeg(filename="./data/Q2.jpg", native=TRUE)
Q2_jpg <- jpeg(filename="./data/Q2.jpg")
quantile(Q2_jpg, probs=c(0.3,0.8))
?readJPEG()
Q2_jpg <- readJPEG("./data/Q2.jpg", native=TRUE)
quantile(Q2_jpg, probs=c(0.3,0.8))
?match()
Q3gdpUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
Q3eduUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(Q3gdpUrl, destfile="./data/Q3gdp.csv", method="curl")
download.file(Q3eduUrl, destfile="./data/Q3edu.csv", method="curl")
dateDownloaded_Q3 <- date()
GDP <- read.csv("./data/Q3gdp.csv")
EDU <- read.csv("./data/Q3edu.csv")
head(GDP, n=3)
?read.csv()
head(GDP)
?colNames()
?names()
GDP_clean <- read.csv("./data/Q3gdp.csv", skip=4)[,c(1,2,4,5)]
names(GDP_clean) <- c("country shortcode", "ranking", "country", "GDP")
head(GDP_clean)
head(EDU)
?match()
names(GDP_clean) <- c("country_shortcode", "ranking", "country", "GDP")
head(GDP_clean)
match(GDP_clean$country_shortcode, EDU$CountryCode)
?merge()
mergedData <- merge(GDP_clean, EDU,by.x="country_shortcode",by.y="CountryCode")
tail(GDP)
GDP_clean <- read.csv("./data/Q3gdp.csv", skip=4)[X != "",c(1,2,4,5)]
GDP_clean2 <- GDP_clean["CountryCode" != "",]
tail(GDP_clean)
tail(GDP_clean, n=10)
head(GDP_clean)
GDP_clean[290:310,]
GDP_clean[270:290,]
GDP_clean2 <- GDP_clean["CountryCode" == "",]
names(GDP_clean) <- c("CountryCode", "Ranking", "Country", "GDP")
GDP_clean2 <- GDP_clean["CountryCode" == "",]
GDP_clean[250:270,]
GDP_clean2 <- GDP_clean[as.character(GDP_clean$CountryCode) == "",]
GDP_clean2 <- GDP_clean[as.character(GDP_clean$CountryCode) != "",]
tail(GDP_clean2)
mergedData <- merge(GDP_clean2, EDU,by="CountryCode")
mergedData <- merge(GDP_clean2, EDU, by="CountryCode")
GDP_clean2 <- GDP_clean[as.character(GDP_clean$CountryCode) != "" & as.character(GDP_clean$Ranking) != "",]
GDP_clean[230:250,]
GDP[185:230,]
GDP_clean[185:230,]
tail(GDP_clean2)
nrows(EDU)
nrow(EDU)
GDP_clean2 <- GDP_clean[as.character(GDP_clean$CountryCode) != "",]
GDP_clean3 <- GDP_clean[as.character(GDP_clean$CountryCode) != "" & as.character(GDP_clean$Ranking) != "",]
GDP_clean2 <- GDP_clean[as.character(GDP_clean$CountryCode) != "",]
GDP_clean2[(nrow(GDP_clean2)-20):nrow(GDP_clean2),]
GDP_clean3 <- GDP_clean2[1:215,]
GDP_clean4 <- GDP_clean[as.character(GDP_clean$CountryCode) != "" & as.character(GDP_clean$Ranking) != "",]
mergedData <- merge(GDP_clean3, EDU, by="CountryCode")
mergedData <- merge(GDP_clean4, EDU, by="CountryCode")
nrow(mergedData)
mergedData[sort(mergedData$Ranking,decreasing=TRUE),][13,]
?order()
mergedData[order(mergedData$Ranking,decreasing=TRUE),][13,"country"]
mergedData[order(mergedData$Ranking,decreasing=TRUE),][13,"Country"]
ordered_mergedData <- mergedData[order(mergedData$Ranking,decreasing=TRUE),]
head(ordered_mergedData, 2)
ordered_mergedData <- mergedData[order(as.numeric(mergedData$Ranking),decreasing=TRUE),]
head(ordered_mergedData, 2)
ordered_mergedData <- mergedData[order(Ranking,decreasing=TRUE),]
tail(mergedData[,1:5])
mergedData$Ranking <- as.numeric(mergedData$Ranking)
summary(mergedData$Ranking)
str(mergedData$Ranking)
ordered_mergedData <- mergedData[order(mergedData$Ranking,decreasing=TRUE),]
head(ordered_mergedData[,1:5], 2)
head(ordered_mergedData[,1:5], n=13)
GDP_clean3[(nrow(GDP_clean3)-20):nrow(GDP_clean3),]
mergedData["Country"=="Spain","Ranking"]
mergedData[mergedData$Country=="Spain",1:5]
mergedData[mergedData$Country=="St. Kitts and Nevis",1:5]
GDP[GDP$X.2=="St. Kitts and Nevis",1:5]
GDP[GDP$X.2=="Spain",1:5]
head(ordered_mergedData[,1:4], n=15)
GDP_clean[GDP_clean$Country=="St. Kitts and Nevis",1:5]
GDP_clean[GDP_clean$Country=="St. Kitts and Nevis",1:4]
GDP_clean2[GDP_clean2$Country=="St. Kitts and Nevis",1:4]
GDP_clean3[GDP_clean3$Country=="St. Kitts and Nevis",1:4]
GDP_clean4[GDP_clean4$Country=="St. Kitts and Nevis",1:4]
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
?merge()
mergedData <- merge(GDP_clean4, EDU, by.x="CountryCode", by.y="CountryCode")
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
mergedData$Ranking <- as.numeric(mergedData$Ranking)
ordered_mergedData <- mergedData[order(mergedData$Ranking,decreasing=TRUE),]
head(ordered_mergedData[,1:5], n=13)
head(ordered_mergedData[,1:5], n=14)
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
mergedData <- merge(GDP_clean4, EDU, by.x="CountryCode", by.y="CountryCode")
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
ordered_mergedData <- mergedData[order(mergedData$Ranking,decreasing=TRUE),]
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
ordered_mergedData[ordered_mergedData$Country=="St. Kitts and Nevis",1:4]
ordered_mergedData[1:13,ordered_mergedData$Country]
ordered_mergedData[1:13,1:5]
ordered_mergedData[ordered_mergedData$Country=="St. Kitts and Nevis",1:4]
ordered_mergedData[1,1:3]
mergedData$Ranking <- as.numeric(mergedData$Ranking)
ordered_mergedData[ordered_mergedData$Country=="St. Kitts and Nevis",1:4]
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
?class()
mergedData <- merge(GDP_clean4, EDU, by.x="CountryCode", by.y="CountryCode")
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
class(mergedData$Ranking) <- integer
class(mergedData$Ranking) <- "integer"
class(mergedData$Ranking)
str(mergedData$Ranking)
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
mergedData <- merge(GDP_clean4, EDU, by.x="CountryCode", by.y="CountryCode")
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
?trim()
class(mergedData$Ranking) <- "character"
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
mergedData <- merge(GDP_clean4, EDU, by.x="CountryCode", by.y="CountryCode")
mergedData[mergedData$Country=="St. Kitts and Nevis",1:4]
x <- sort(mergedData$Ranking)
x[1:13]
x <- sort(mergedData$Ranking, decreasing=TRUE)
x[1:13]
?read.csv
?data.table()
install.packages(data.table)
install.packages("data.table")
library(data.table)
?data.table()
GDP <- data.table(read.csv("./data/Q3gdp.csv"))
GDP_clean <- data.table(read.csv("./data/Q3gdp.csv", skip=4)[,c(1,2,4,5)])
names(GDP_clean) <- c("CountryCode", "Ranking", "Country", "GDP")
GDP_clean <- data.table(read.csv("./data/Q3gdp.csv", skip=4)[,c(1,2,4,5)])
setnames(GDP_clean, c("X", "Gross.domestic.product.2012", "X.2", "X.3"), c("CountryCode", "Ranking", "Country", "GDP"))
names(GDP_clean)
head(GDP_clean)
names(GDP)
head(GDP, n=2)
head(GDP, n=6)
head(GDP_clean)
GDP_clean2 <- GDP_clean[as.character(GDP_clean$CountryCode) != "",]
GDP_clean3 <- GDP_clean2[1:215,]
GDP_clean4 <- GDP_clean[as.character(GDP_clean$CountryCode) != "" & as.character(GDP_clean$Ranking) != "",]
GDP_clean4[GDP_clean4$Country=="St. Kitts and Nevis",1:4]
names(GDP_clean4)[1:5]
setnames(GDP_clean, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "Ranking", "Country", "GDP"))
GDP_clean2 <- GDP_clean[as.character(GDP_clean$CountryCode) != "",]
GDP_clean2[(nrow(GDP_clean2)-20):nrow(GDP_clean2),]
GDP_clean3 <- GDP_clean2[1:215,]
GDP_clean4 <- GDP_clean[as.character(GDP_clean$CountryCode) != "" & as.character(GDP_clean$Ranking) != "",]
GDP_clean4[GDP_clean4$Country=="St. Kitts and Nevis",1:4]
names(GDP_clean4)[1:4]
GDP_clean4[GDP_clean4$Country=="St. Kitts and Nevis",]
GDP_clean4["Country"=="St. Kitts and Nevis",]
EDU <- data.table(read.csv("./data/Q3edu.csv"))
mergedData <- merge(GDP_clean4, EDU, by.x="CountryCode", by.y="CountryCode")
mergedData <- merge(GDP_clean4, EDU, by="CountryCode")
mergedData[mergedData$Country=="St. Kitts and Nevis",mergedData$Ranking]
mergedData[mergedData$Country=="St. Kitts and Nevis",][,mergedData$Ranking]
mergedData[mergedData$Country=="St. Kitts and Nevis",]
nrow(mergedData)
ordered_mergedData <- mergedData[order(Ranking,decreasing=TRUE), list(CountryCode, Ranking, Country)][13]
ordered_mergedData
mergedData[mergedData$Country=="St. Kitts and Nevis",list(CountryCode, Ranking, Country)]
class(mergedData$Ranking) <- "numeric"
mergedData[mergedData$Country=="St. Kitts and Nevis",list(CountryCode, Ranking, Country)]
mergedData <- merge(GDP_clean4, EDU, by="CountryCode")
mergedData <- merge(GDP_clean4, EDU, by="CountryCode")
mergedData[mergedData$Country=="St. Kitts and Nevis",list(CountryCode, Ranking, Country)]
head(mergedData)
Q4 <- mergedData[,mean(GDP, na.rm=TRUE), by=Income.Group]
Q4
Q4 <- mergedData[,mean(Ranking, na.rm=TRUE), by=Income.Group]
Q4
mergedData$Ranking <- as.numeric(as.character(mergedData$Ranking))
mergedData[mergedData$Country=="St. Kitts and Nevis",list(CountryCode, Ranking, Country)]
ordered_mergedData <- mergedData[order(Ranking,decreasing=TRUE), list(CountryCode, Ranking, Country)][13]
ordered_mergedData
Q4 <- mergedData[,mean(Ranking, na.rm=TRUE), by=Income.Group]
Q4
breaks <- quantile(mergedData$Ranking, probs=seq(0, 1, 0.2), na.rm=TRUE)
mergedData$RankGroups <- cut(mergedData$Ranking, breaks=breaks)
mergedData[Income.Group == "Lower middle income", .N, by=c("Income.Group", "RankGroup")]
mergedData[Income.Group == "Lower middle income", .N, by=c("Income.Group", "RankGroups")]
Q5 <- mergedData[Income.Group == "Lower middle income", .N, by=c("Income.Group", "RankGroups")]
Q5
?unzip()
setwd("~/Desktop/GettingnCleaningData/CourseProject")
if(!file.exists("./data")){dir.create("./data")}
dataUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(dataUrl, destfile="./data/Dataset.zip", method="curl")
unzip("./data/Dataset.zip")
unzip("./data/Dataset.zip", exdir="./data")
?rm()
sapply(c("data.table", "reshape2"), require, character.only=TRUE, quietly=TRUE)
?file.path()
?list.file()
?list.files()
pathEx <- file.path("./data", "UCI HAR Dataset")
list.files(pathEx, recursive=TRUE)
?fread()
SubjTrain <- fread("./data/UCI HAR Dataset/train/subject_train.txt")
SubjTest <- fread("./data/UCI HAR Dataset/test/subject_test.txt")
ActlTrain <- fread("./data/UCI HAR Dataset/train/y_train.txt")
ActlTest <- fread("./data/UCI HAR Dataset/test/y_test.txt")
MeasTrain <- fread("./data/UCI HAR Dataset/train/X_train.txt")
MeasTrain <- read.table("./data/UCI HAR Dataset/train/X_train.txt")
View(MeasTrain)
MeasTest <- fread("./data/UCI HAR Dataset/test/X_test.txt", header=FALSE)
MeasTest <- read.table("./data/UCI HAR Dataset/test/X_test.txt")
MeasTrain <- data.table(read.table("./data/UCI HAR Dataset/train/X_train.txt"))
MeasTest <- data.table(read.table("./data/UCI HAR Dataset/test/X_test.txt"))
?rbind()
Subj_TT <- rbind(SubjTrain, SubjTest)
setnames(Subj_TT, "V1", "subject")
View(Subj_TT)
Actl_TT <- rbind(ActlTrain, ActlTest)
setnames(Actl_TT, "V1", "activity")
?setkey()
Meas_TT <- rbind(MeasTrain, MeasTest)
Feature <- fread("./data/UCI HAR Dataset/features.txt")
?grep()
setnames(Feature, c(V1, V2), c("featureIndex", "featureName"))
setnames(Feature, c("V1", "V2"), c("featureIndex", "featureName"))
head(Feature, n=3)
Index <- Feature[grep("mean\\(\\) | std\\(\\)", featureName), featureIndex]
Index <- Feature[grepl("mean\\(\\) | std\\(\\)", featureName), featureIndex]
Index <- Feature[grep("mean\\(\\) | std\\(\\)", featureName), featureIndex]
grep("mean\\(\\) | std\\(\\)", featureName)
grep("mean\\(\\) | std\\(\\)", Feature$featureName)
grepl("mean\\(\\) | std\\(\\)", Feature$featureName)
grepl("mean\\(\\)", Feature$featureName)
grepl("mean\\(\\)" | "std\\(\\)", Feature$featureName)
grep("mean\\(\\)", Feature$featureName)
Index_std <- grep("std\\(\\)", Feature$featureName)
Index_std
Index_mean <- grep("mean\\(\\)", Feature$featureName)
Index_mean
Index <- c(Index_mean, Index_std)
Index
sort(Index)
Index <- sort(c(Index_mean, Index_std))
Index
?paste()
paste("V", Index, sep="")
col_name <- paste("V", Index, sep="")
Meas_TT_ms <- Meas_TT[, col_name]
Meas_TT_ms <- Meas_TT[, c("V1","V2")]
?setkey()
?key()
Meas_TT_ms <- Meas_TT[, c("V1","V2"), with=FALSE]
Meas_TT_ms <- Meas_TT[, col_name, with=FALSE]
?replace()
?grep()
gsub("1", "WALKING", Actl_TT$activity)
Actl_TT$activity <- gsub("1", "WALKING", Actl_TT$activity)
Actl_TT$activity <- gsub("2", "WALKING_UPSTAIRS", Actl_TT$activity)
Actl_TT$activity <- gsub("3", "WALKING_DOWNSTAIRS", Actl_TT$activity)
Actl_TT$activity <- gsub("4", "SITTING", Actl_TT$activity)
Actl_TT$activity <- gsub("5", "STANDING", Actl_TT$activity)
Actl_TT$activity <- gsub("6", "LAYING", Actl_TT$activity)
?as.factor()
Actl_TT$activity <- as.factor(Actl_TT$activity)
Actl_TT$activity <- as.factor(Actl_TT$activity, c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS",
"SITTING", "STANDING", "LAYING"))
Actl_TT$activity <- as.factor(Actl_TT$activity, levels = c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS",
"SITTING", "STANDING", "LAYING"))
Actl_TT$activity <- as.factor(Actl_TT$activity)
var_name <- Feature$featureName[Index]
setnames(Meas_TT_ms, col_name, var_name)
?cbind()
dt <- cbind(Subj_TT, Actl_TT, Meas_TT_ms)
?grep()
gsub("\\(\\)", "", Feature$featureName[1:10])
Feature$featureName <- gsub("\\(\\)", "", Feature$featureName)
var_name <- Feature$featureName[Index]
setnames(Meas_TT_ms, col_name, var_name)
col_name <- paste("V", Index, sep="")
setnames(Meas_TT_ms, col_name, var_name)
Index_mean <- grep("mean\\(\\)", Feature$featureName)
Index_std <- grep("std\\(\\)", Feature$featureName)
Index <- sort(c(Index_mean, Index_std))
col_name <- paste("V", Index, sep="")
Meas_TT_ms <- Meas_TT[, col_name, with=FALSE]
if(!file.exists("./data")){dir.create("./data")}
SubjTrain <- fread("./data/UCI HAR Dataset/train/subject_train.txt")
SubjTest <- fread("./data/UCI HAR Dataset/test/subject_test.txt")
ActlTrain <- fread("./data/UCI HAR Dataset/train/y_train.txt")
ActlTest <- fread("./data/UCI HAR Dataset/test/y_test.txt")
MeasTrain <- data.table(read.table("./data/UCI HAR Dataset/train/X_train.txt"))
MeasTest <- data.table(read.table("./data/UCI HAR Dataset/test/X_test.txt"))
Subj_TT <- rbind(SubjTrain, SubjTest)
setnames(Subj_TT, "V1", "subject")
Actl_TT <- rbind(ActlTrain, ActlTest)
setnames(Actl_TT, "V1", "activity")
Meas_TT <- rbind(MeasTrain, MeasTest)
Feature <- fread("./data/UCI HAR Dataset/features.txt")
setnames(Feature, c("V1", "V2"), c("featureIndex", "featureName"))
Index_mean <- grep("mean\\(\\)", Feature$featureName)
Index_std <- grep("std\\(\\)", Feature$featureName)
Index <- sort(c(Index_mean, Index_std))
col_name <- paste("V", Index, sep="")
Meas_TT_ms <- Meas_TT[, col_name, with=FALSE]
Actl_TT$activity <- gsub("1", "WALKING", Actl_TT$activity)
Actl_TT$activity <- gsub("2", "WALKING_UPSTAIRS", Actl_TT$activity)
Actl_TT$activity <- gsub("3", "WALKING_DOWNSTAIRS", Actl_TT$activity)
Actl_TT$activity <- gsub("4", "SITTING", Actl_TT$activity)
Actl_TT$activity <- gsub("5", "STANDING", Actl_TT$activity)
Actl_TT$activity <- gsub("6", "LAYING", Actl_TT$activity)
Actl_TT$activity <- as.factor(Actl_TT$activity)
Feature$featureName <- gsub("\\(\\)", "", Feature$featureName)
var_name <- Feature$featureName[Index]
setnames(Meas_TT_ms, col_name, var_name)
dt <- cbind(Subj_TT, Actl_TT, Meas_TT_ms)
?melt()
?melt()
Feature$featureName <- gsub("^t", "Time", Feature$featureName)
Feature$featureName <- gsub("^f", "Freq", Feature$featureName)
Feature$featureName <- gsub("Acc", "Accelerometer", Feature$featureName)
Feature$featureName <- gsub("Gyro", "Gyroscope", Feature$featureName)
Feature$featureName <- gsub("Mag", "Magnitude", Feature$featureName)
Meas_TT <- rbind(MeasTrain, MeasTest)
Feature <- fread("./data/UCI HAR Dataset/features.txt")
setnames(Feature, c("V1", "V2"), c("featureIndex", "featureName"))
## get feature index of those features that has either "mean()" or "std()" in their names
Index_mean <- grep("mean\\(\\)", Feature$featureName)
Index_std <- grep("std\\(\\)", Feature$featureName)
Index <- sort(c(Index_mean, Index_std))
## compose colume name by paste()
col_name <- paste("V", Index, sep="")
## subset measure data table by these columns
Meas_TT_ms <- Meas_TT[, col_name, with=FALSE]
Feature$featureName <- gsub("\\(\\)", "", Feature$featureName)
Feature$featureName <- gsub("^t", "Time", Feature$featureName)
Feature$featureName <- gsub("^f", "Freq", Feature$featureName)
Feature$featureName <- gsub("Acc", "Accelerometer", Feature$featureName)
Feature$featureName <- gsub("Gyro", "Gyroscope", Feature$featureName)
Feature$featureName <- gsub("Mag", "Magnitude", Feature$featureName)
var_name <- Feature$featureName[Index]
setnames(Meas_TT_ms, col_name, var_name)
dt <- cbind(Subj_TT, Actl_TT, Meas_TT_ms)
Actl_TT$activity <- factor(Actl_TT$activity)
Actl_TT$activity <- factor(Actl_TT$activity, levels=c("WALKING", "WALKING_UPSTAIRS",
"WALKING_DOWNSTAIRS", "SITTING",
"STANDING", "LAYING"))
dt <- cbind(Subj_TT, Actl_TT, Meas_TT_ms)
setkey(dt, subject, activity)
dt_reshape <- data.table(melt(dt, key(dt), variable.name=var_name))
dt_reshape <- data.table(melt(dt, key(dt), variable.name="featureName"))
?grep()
?ifelse()
test <- c(1,2,1,2,1,3)
test <- c("ab", "ac", "bc", "bd", "ad")
test2 <- ifelse(grepl("a", test), "a", "n")
test2
dt_reshape$feature_Domain <- ifelse(grepl("Time", dt_reshape$featureName), "Time", "Frequence")
dt_reshape$feature_Domain <- factor(ifelse(grepl("Time", dt_reshape$featureName), "Time", "Frequency"))
dt_reshape$feature_Acceleration <- factor(ifelse(grepl("Body", dt_reshape$featureName), "Body", "Gravity"))
dt_reshape$feature_Calc <- factor(ifelse(grepl("Magnitude", dt_reshape$featureName),
ifelse(grepl("Jerk", dt_reshape$featureName),
ifelse(grepl("Accelerometer", dt_reshape$featureName),
"linear acceleration Jerk magnitude",
"angular velocity Jerk magnitude"),
ifelse(grepl("Accelerometer", dt_reshape$featureName),
"linear acceleration magnitude",
"angular velocity magnitude")),
ifelse(grepl("Jerk", dt_reshape$featureName),
ifelse(grepl("Accelerometer", dt_reshape$featureName),
"linear acceleration Jerk",
"angular velocity Jerk"),
ifelse(grepl("Accelerometer", dt_reshape$featureName),
"linear acceleration",
"angular velocity"))))
dt_reshape$feature_Instrument <- factor(ifelse(grepl("Accelerometer", dt_reshape$featureName),
"Accelerometer", "Gyroscope"))
dt_reshape$feature_Axis <- factor(ifelse(grepl("-X", dt_reshape$featureName),
"X",
ifelse(grepl("-Y", dt_reshape$featureName),
"Y",
ifelse(grepl("-Z",dt_reshape$featureName),
"Z", ""))))
dt_reshape$feature_Estimation <- factor(ifelse(grepl("mean", dt_reshape$featureName),
"Mean", "SD"))
View(dt_reshape)
View(dt)
View(Actl_TT)
View(ActlTrain)
View(ActlTest)
View(Meas_TT)
View(Subj_TT)
setkey(dt_reshape, subject, activity, feature_Domain, feature_Acceleration, feature_Instrument, feature_Calc, feature_Estimation, feature_Axis)
dt_tidy <- dt_reshape[, list(count = .N, average = mean(value)), by=key(dt_reshape)]
?write.table()
View(dt_tidy)
dt_reshape$feature_Domain <- factor(ifelse(grepl("Time", dt_reshape$featureName), "Time", "Frequency"),
levels=c("Time","Frequency"))
setkey(dt_reshape, subject, activity, feature_Domain, feature_Acceleration, feature_Instrument, feature_Calc, feature_Estimation, feature_Axis)
dt_tidy <- dt_reshape[, list(count = .N, average = mean(value)), by=key(dt_reshape)]
setkey(dt_reshape, subject, activity, featureName)
dt_tidy_2 <- dt_reshape[, list(count = .N, average = mean(value)), by=key(dt_reshape)]
write.table(dt_tidy, file="./data/tidy.txt", row.name=FALSE)
rm("./data/tidy.txt")
delete("./data/tidy.txt")
file.remove("./data/tidy.txt")
write.table(dt_tidy, file="./data/tidy.txt", row.name=FALSE, sep="\t")
file.remove("./data/tidy.txt")
write.table(dt_tidy, file="./data/tidy.txt", row.name=FALSE, sep="\t", quote=FALSE)
file.remove("./data/tidy.txt")
write.table(dt_tidy, file="./tidy.txt", row.name=FALSE, sep="\t", quote=FALSE)
getwd()
summary(dt_tidy)
str(dt_tidy)
summary(dt_tidy)
str(dt_tidy)
summary(dt_tidy)
key(dt_tidy)
file.remove("./CodeBook.Rmd")
git init
?git
?git()
